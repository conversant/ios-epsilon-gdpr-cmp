#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CONVERSANTCMPWIDGET_SWIFT_H
#define CONVERSANTCMPWIDGET_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ConversantCMPWidget",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget4Body")
@interface Body : NSObject
/// <em>OPTIONAL</em> To deliver the best possible experience, we and our partners use technologies such as cookies to [[purposes_1_name_lower]]. These technologies may collect personal data such as IP address and browsing behaviour to provide [[stacks_42_name_lower]]. [[stacks_1_description_none]]
@property (nonatomic, copy) NSString * _Nullable p1;
/// <em>OPTIONAL</em> Click below to consent to the use of these technologies and the processing on this site and on other sites where we and our partners operate. Some companies may process personal data on the basis of legitimate interest. Alternately, you can review your preferences and make more granular choices, including exercising your right to object to processing based on legitimate interest. You can change your mind at any time by visiting our privacy policy.
@property (nonatomic, copy) NSString * _Nullable p2;
/// <em>OPTIONAL</em> Rightmost call to action label
@property (nonatomic, copy) NSString * _Nullable cta;
/// <em>OPTIONAL</em> Bottom left link to review settings
@property (nonatomic, copy) NSString * _Nullable reviewLink;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSString * _Nullable seeMoreLink;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget7Buttons")
@interface Buttons : NSObject
/// <em>OPTIONAL</em> Label for allow buttons
@property (nonatomic, copy) NSString * _Nullable allow;
/// <em>OPTIONAL</em> Label for deny buttons
@property (nonatomic, copy) NSString * _Nullable deny;
/// <em>OPTIONAL</em> Opt Out button label
@property (nonatomic, copy) NSString * _Nullable optOut;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC19ConversantCMPWidget10CMPWebView")
@interface CMPWebView : WKWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end

@class Header;

/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget9Companies")
@interface Companies : NSObject
/// <em>OPTIONAL</em> All Headers for a companies purposes/features
@property (nonatomic, strong) Header * _Nullable header;
/// <em>OPTIONAL</em> Privacy policy link label
@property (nonatomic, copy) NSString * _Nullable privacyPolicyLink;
/// <em>OPTIONAL</em> Upper left tab link for “Companies”
@property (nonatomic, copy) NSString * _Nullable tabTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget11CompanyList")
@interface CompanyList : NSObject
/// <em>OPTIONAL</em> Label for hiding expanded list of vendors
@property (nonatomic, copy) NSString * _Nullable hide;
/// <em>OPTIONAL</em> Label for when there are no companies to show in the expanded list of companies
@property (nonatomic, copy) NSString * _Nullable no;
/// <em>OPTIONAL</em> Label for showing expanded list of companies
@property (nonatomic, copy) NSString * _Nullable show;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@class NSNumber;
@class UIViewController;

SWIFT_CLASS("_TtC19ConversantCMPWidget13ConversantCMP")
@interface ConversantCMP : NSObject
/// Adjusts the timeout for GDPR checking.  A reasonable value here is 10 to 30 seconds, but typically, the check takes under 5 seconds with a standard network connection.
@property (nonatomic) NSTimeInterval timeoutSeconds;
/// Initialize the Conversant CMP.
/// \param configuration The configuration for the CMP object.
///
- (nonnull instancetype)initWithConfiguration:(NSData * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Check if GDPR is required. Can come in handy while enabling or disabling buttons for providing user actions for getting consent data. Is called internally by both present and modify functions.
/// \param containerView The view in which to attach the hidden webview for initial consent processing. The only requirement for this view is that it is currently presented and will remain so for the duration of the processing (up to 10 seconds max).
///
/// \param completion Callback that is provided will receive “1” if the gdpr consent is required, else 0. Will receive nil in case the gdpr check times out. Can’t use optional Bool here since it doesn’t work with Objective-C currently.
///
- (void)checkGDPRIsRequiredWithContainerView:(UIView * _Nonnull)containerView completion:(void (^ _Nonnull)(NSNumber * _Nullable))completion;
/// Display the CMP widget from the provided view controller.  This can only be used if gdpr is found to be required, otherwise, you’ll receive an error message.
/// \param presentingViewController The View Controller from which to present the widget.
///
/// \param onComplete Function to perform once presentation of the widget is complete. This is not called unless the Widget User Interface is <em>actually displayed</em>. If you try to pop the User Interface using this and it is not required, you will get an error message and this completion will not be called.
///
- (void)presentCMPWidgetFrom:(UIViewController * _Nonnull)presentingViewController onComplete:(void (^ _Nullable)(void))onComplete;
/// Force Display the CMP widget from the provided view controller irresepective of whether gdpr consent is received or not. This should only be used when the publisher is allowing the user to edit consents.
/// \param presentingViewController The View Controller from which to present the widget.fa
///
/// \param onComplete Function to perform once presentation of the widget is complete. This is not called unless the Widget User Interface is <em>actually displayed</em>. If you try to pop the User Interface using this and it is not required, you will get an error message and this completion will not be called.
///
- (void)modifyConsentFrom:(UIViewController * _Nonnull)presentingViewController onComplete:(void (^ _Nullable)(void))onComplete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CustomUI;
@class LegalBases;
@class Text;

SWIFT_CLASS("_TtC19ConversantCMPWidget26ConversantCMPConfiguration")
@interface ConversantCMPConfiguration : NSObject
/// <em>OPTIONAL</em>  - Absolute (full url) path to logo for site branding. Will be used on the CMP UI aligned Vertical left maximum length=250px, height 95px
@property (nonatomic, copy) NSString * _Nullable brandingImg;
/// The country code of the country that determines legislation of reference. Commonly, this corresponds to the country in which the publisher’s business entity is established.  see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
@property (nonatomic, readonly, copy) NSString * _Nonnull countryCode;
/// <em>OPTIONAL</em> Used to load asychronous css override as the CMP UI is loaded asynchronously if there are issues with CSS and the host page this would be the place to fix them. Likewise, if the publisher wanted the ability to customize their CMP to the design and style of the host site they could do that here. URL must be secure (starting with https://) if the CMP UI may show on any secure pages.
@property (nonatomic, copy) NSString * _Nullable cssOverride;
/// <em>OPTIONAL</em> default language code.  This will be the fallback.  The language will be drawn from the browser’s user preference initially, if it doesn’t exist  this will be the default.
@property (nonatomic, copy) NSString * _Nullable lang;
/// <em>OPTIONAL</em> publisher’s legal entity display name
@property (nonatomic, copy) NSString * _Nullable legalName;
/// <em>OPTIONAL</em> Link to your privacy policy page
@property (nonatomic, copy) NSString * _Nullable policyUrl;
/// <em>OPTIONAL</em>
/// * Filter of ids from the IAB global vendor list (GVL). If this is not here,
/// * then the entire GVL will be shown.  CMPwidget  <em>will NOT show</em> if this entry is
/// * defined and vendor #24 (Conversant) is missing from the list.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable vendors;
/// The version of the vendor list. It is important to bump this when you change any significant components of this configuration (privacy policy changes, etc).
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Either string domain name or advertiser id used to uniquely identify for logging. Passed to the set consent endpoint and the audit endpoint. unique identifier for the host site
/// Default is the app’s info.plist bundle identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// <em>OPTIONAL</em> Gives the ability to control certain groups of elements colors and button display types. Can use any CSS types of colors.
@property (nonatomic, strong) CustomUI * _Nullable customUI;
/// <em>OPTIONAL</em> the legal bases to ask for consent or declare for transparency for this site/publisher.
@property (nonatomic, strong) LegalBases * _Nullable legalBases;
/// <em>OPTIONAL</em> To replace any text in the CMP If this key exists, and the language is a ‘supported’ two-letter uppercase
/// langauge then this will take precedence over any other language scheme. Otherwise the CMP will fall back to the existing
/// scheme of chosing browser langauge code -> config.lang -> “EN”
@property (nonatomic, strong) Text * _Nullable text;
/// Initializer for the Conversant CMP Configuration.
/// \param version String. The version of the vendor list. It is important to bump this when you change any significant components of this configuration (privacy policy changes, etc).
///
/// \param countryCode String.  The country code of the country that determines legislation of reference. Commonly, this corresponds to the country in which the publisher’s business entity is established. see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
///
- (nonnull instancetype)initWithCountryCode:(NSString * _Nonnull)countryCode version:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <em>OPTIONAL</em> Gives the ability to control certain groups of elements colors and button display types. Can use any CSS types of colors.
SWIFT_CLASS("_TtC19ConversantCMPWidget8CustomUI")
@interface CustomUI : NSObject
/// <em>OPTIONAL</em> Background color of the CMP UI, see
/// https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
/// <em>OPTIONAL</em> Button border radius in CMP UI, see
/// https://www.w3schools.com/CSSref/css3_pr_border-radius.asp
@property (nonatomic, copy) NSString * _Nullable borderRadiusButton;
/// <em>OPTIONAL</em> Color of hyperlinks in CMP UI, see
/// https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
@property (nonatomic, copy) NSString * _Nullable linkColor;
/// <em>OPTIONAL</em> Primary accent color in CMP UI. Affects the button color, default is a blue color, see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
@property (nonatomic, copy) NSString * _Nullable primaryColor;
/// <em>OPTIONAL</em> Color of text in CMP UI, see
/// https://developer.mozilla.org/en-US/docs/Web/CSS/color_val
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget6Footer")
@interface Footer : NSObject
/// <em>OPTIONAL</em> Label for allow all button links
@property (nonatomic, copy) NSString * _Nullable allowAll;
/// <em>OPTIONAL</em> Rightmost call to action label on this page
@property (nonatomic, copy) NSString * _Nullable cta;
/// <em>OPTIONAL</em> Label for deny all button links
@property (nonatomic, copy) NSString * _Nullable denyAll;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget6Header")
@interface Header : NSObject
/// <em>OPTIONAL</em> Header for a companies purpose consents
@property (nonatomic, copy) NSString * _Nullable consent;
/// <em>OPTIONAL</em>  Header for a companies features
@property (nonatomic, copy) NSString * _Nullable feature;
/// <em>OPTIONAL</em>  Header for a companies purpose legitimate interest establishment
@property (nonatomic, copy) NSString * _Nullable legInt;
/// <em>OPTIONAL</em>  Header for a companies special purposes
@property (nonatomic, copy) NSString * _Nullable specialPurpose;
/// <em>OPTIONAL</em>  Header for a companies special features
@property (nonatomic, copy) NSString * _Nullable specialFeature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget5Label")
@interface Label : NSObject
/// <em>OPTIONAL</em> When the word feature appears in the UI
@property (nonatomic, copy) NSString * _Nullable feature;
/// <em>OPTIONAL</em> When the word purpose appears in the UI
@property (nonatomic, copy) NSString * _Nullable purpose;
/// <em>OPTIONAL</em> When the word special feature appears in the UI
@property (nonatomic, copy) NSString * _Nullable specialFeature;
/// <em>OPTIONAL</em> When the word special purpose appears in the UI
@property (nonatomic, copy) NSString * _Nullable specialPurpose;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget7Landing")
@interface Landing : NSObject
/// <em>OPTIONAL</em> Landing view body
@property (nonatomic, strong) Body * _Nullable body;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Purpose;

/// <em>OPTIONAL</em> The legal bases to ask for consent or declare for transparency for this site/publisher.
SWIFT_CLASS("_TtC19ConversantCMPWidget10LegalBases")
@interface LegalBases : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable feature;
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Purpose * _Nullable purpose;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable specialFeature;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable specialPurpose;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget16LegalDescription")
@interface LegalDescription : NSObject
/// <em>OPTIONAL</em> Label for hiding legal description of purposes and disclosures
@property (nonatomic, copy) NSString * _Nullable hide;
/// <em>OPTIONAL</em> Label for showing legal description for purposes and disclosures
@property (nonatomic, copy) NSString * _Nullable show;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget7Purpose")
@interface Purpose : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable consent;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable legitimateInterest;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget8Purposes")
@interface Purposes : NSObject
/// <em>OPTIONAL</em> All Headers for a companies purposes/features
@property (nonatomic, strong) Header * _Nullable header;
/// <em>OPTIONAL</em> All labels for purpose/feature or their specials
@property (nonatomic, strong) Label * _Nullable label;
/// <em>OPTIONAL</em> All text surrounding legal description
@property (nonatomic, strong) LegalDescription * _Nullable legalDescription;
/// <em>OPTIONAL</em> All text for companies show, hide, no for companies list
@property (nonatomic, strong) CompanyList * _Nullable companyList;
/// <em>OPTIONAL</em> Upper right tab link for “Purposes”
@property (nonatomic, copy) NSString * _Nullable tabTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Tabs;

/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget6Review")
@interface Review : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Tabs * _Nullable tabs;
/// <em>OPTIONAL</em> Describes all button text
@property (nonatomic, strong) Buttons * _Nullable buttons;
/// <em>OPTIONAL</em> Describes all the text in the footer of the Review View
@property (nonatomic, strong) Footer * _Nullable footer;
/// <em>OPTIONAL</em> Top intro body
@property (nonatomic, copy) NSString * _Nullable introBody;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget11SeeMoreLink")
@interface SeeMoreLink : NSObject
/// <em>OPTIONAL</em> Can expand to see more
@property (nonatomic, copy) NSString * _Nullable seeMore;
/// <em>OPTIONAL</em> Can expand to see more
@property (nonatomic, copy) NSString * _Nullable seeLess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget4Tabs")
@interface Tabs : NSObject
/// <em>OPTIONAL</em> Describes all the text in the companies accordion tab of the Review View
@property (nonatomic, strong) Companies * _Nullable companies;
/// <em>OPTIONAL</em> Describes all the text in the purposes accordion tab of the Review View
@property (nonatomic, strong) Purposes * _Nullable purposes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget4Text")
@interface Text : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Landing * _Nullable landing;
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Review * _Nullable review;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CONVERSANTCMPWIDGET_SWIFT_H
#define CONVERSANTCMPWIDGET_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ConversantCMPWidget",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget4Body")
@interface Body : NSObject
/// <em>OPTIONAL</em> To deliver the best possible experience, we and our partners use technologies such as cookies to [[purposes_1_name_lower]]. These technologies may collect personal data such as IP address and browsing behaviour to provide [[stacks_42_name_lower]]. [[stacks_1_description_none]]
@property (nonatomic, copy) NSString * _Nullable p1;
/// <em>OPTIONAL</em> Click below to consent to the use of these technologies and the processing on this site and on other sites where we and our partners operate. Some companies may process personal data on the basis of legitimate interest. Alternately, you can review your preferences and make more granular choices, including exercising your right to object to processing based on legitimate interest. You can change your mind at any time by visiting our privacy policy.
@property (nonatomic, copy) NSString * _Nullable p2;
/// <em>OPTIONAL</em> Rightmost call to action label
@property (nonatomic, copy) NSString * _Nullable cta;
/// <em>OPTIONAL</em> Bottom left link to review settings
@property (nonatomic, copy) NSString * _Nullable reviewLink;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSString * _Nullable seeMoreLink;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget7Buttons")
@interface Buttons : NSObject
/// <em>OPTIONAL</em> Label for allow buttons
@property (nonatomic, copy) NSString * _Nullable allow;
/// <em>OPTIONAL</em> Label for deny buttons
@property (nonatomic, copy) NSString * _Nullable deny;
/// <em>OPTIONAL</em> Opt Out button label
@property (nonatomic, copy) NSString * _Nullable optOut;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC19ConversantCMPWidget10CMPWebView")
@interface CMPWebView : WKWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end

@class Header;

/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget9Companies")
@interface Companies : NSObject
/// <em>OPTIONAL</em> All Headers for a companies purposes/features
@property (nonatomic, strong) Header * _Nullable header;
/// <em>OPTIONAL</em> Privacy policy link label
@property (nonatomic, copy) NSString * _Nullable privacyPolicyLink;
/// <em>OPTIONAL</em> Upper left tab link for “Companies”
@property (nonatomic, copy) NSString * _Nullable tabTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget11CompanyList")
@interface CompanyList : NSObject
/// <em>OPTIONAL</em> Label for hiding expanded list of vendors
@property (nonatomic, copy) NSString * _Nullable hide;
/// <em>OPTIONAL</em> Label for when there are no companies to show in the expanded list of companies
@property (nonatomic, copy) NSString * _Nullable no;
/// <em>OPTIONAL</em> Label for showing expanded list of companies
@property (nonatomic, copy) NSString * _Nullable show;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@class NSNumber;
@class UIViewController;

SWIFT_CLASS("_TtC19ConversantCMPWidget13ConversantCMP")
@interface ConversantCMP : NSObject
/// Adjusts the timeout for GDPR checking.  A reasonable value here is 10 to 30 seconds, but typically, the check takes under 5 seconds with a standard network connection.
@property (nonatomic) NSTimeInterval timeoutSeconds;
/// Initialize the Conversant CMP.
/// \param configuration The configuration for the CMP object.
///
- (nonnull instancetype)initWithConfiguration:(NSData * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Check if GDPR is required. Can come in handy while enabling or disabling buttons for providing user actions for getting consent data. Is called internally by both present and modify functions.
/// \param containerView The view in which to attach the hidden webview for initial consent processing. The only requirement for this view is that it is currently presented and will remain so for the duration of the processing (up to 10 seconds max).
///
/// \param completion Callback that is provided will receive “1” if the gdpr consent is required, else 0. Will receive nil in case the gdpr check times out. Can’t use optional Bool here since it doesn’t work with Objective-C currently.
///
- (void)checkGDPRIsRequiredWithContainerView:(UIView * _Nonnull)containerView completion:(void (^ _Nonnull)(NSNumber * _Nullable))completion;
/// Display the CMP widget from the provided view controller.  This can only be used if gdpr is found to be required, otherwise, you’ll receive an error message.
/// \param presentingViewController The View Controller from which to present the widget.
///
/// \param onComplete Function to perform once presentation of the widget is complete. This is not called unless the Widget User Interface is <em>actually displayed</em>. If you try to pop the User Interface using this and it is not required, you will get an error message and this completion will not be called.
///
- (void)presentCMPWidgetFrom:(UIViewController * _Nonnull)presentingViewController onComplete:(void (^ _Nullable)(void))onComplete;
/// Force Display the CMP widget from the provided view controller irresepective of whether gdpr consent is received or not. This should only be used when the publisher is allowing the user to edit consents.
/// \param presentingViewController The View Controller from which to present the widget.fa
///
/// \param onComplete Function to perform once presentation of the widget is complete. This is not called unless the Widget User Interface is <em>actually displayed</em>. If you try to pop the User Interface using this and it is not required, you will get an error message and this completion will not be called.
///
- (void)modifyConsentFrom:(UIViewController * _Nonnull)presentingViewController onComplete:(void (^ _Nullable)(void))onComplete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CustomUI;
@class LegalBases;
@class Text;

SWIFT_CLASS("_TtC19ConversantCMPWidget26ConversantCMPConfiguration")
@interface ConversantCMPConfiguration : NSObject
/// <em>OPTIONAL</em>  - Absolute (full url) path to logo for site branding. Will be used on the CMP UI aligned Vertical left maximum length=250px, height 95px
@property (nonatomic, copy) NSString * _Nullable brandingImg;
/// The country code of the country that determines legislation of reference. Commonly, this corresponds to the country in which the publisher’s business entity is established.  see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
@property (nonatomic, readonly, copy) NSString * _Nonnull countryCode;
/// <em>OPTIONAL</em> Used to load asychronous css override as the CMP UI is loaded asynchronously if there are issues with CSS and the host page this would be the place to fix them. Likewise, if the publisher wanted the ability to customize their CMP to the design and style of the host site they could do that here. URL must be secure (starting with https://) if the CMP UI may show on any secure pages.
@property (nonatomic, copy) NSString * _Nullable cssOverride;
/// <em>OPTIONAL</em> default language code.  This will be the fallback.  The language will be drawn from the browser’s user preference initially, if it doesn’t exist  this will be the default.
@property (nonatomic, copy) NSString * _Nullable lang;
/// <em>OPTIONAL</em> publisher’s legal entity display name
@property (nonatomic, copy) NSString * _Nullable legalName;
/// <em>OPTIONAL</em> Link to your privacy policy page
@property (nonatomic, copy) NSString * _Nullable policyUrl;
/// <em>OPTIONAL</em>
/// * Filter of ids from the IAB global vendor list (GVL). If this is not here,
/// * then the entire GVL will be shown.  CMPwidget  <em>will NOT show</em> if this entry is
/// * defined and vendor #24 (Conversant) is missing from the list.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable vendors;
/// The version of the vendor list. It is important to bump this when you change any significant components of this configuration (privacy policy changes, etc).
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Either string domain name or advertiser id used to uniquely identify for logging. Passed to the set consent endpoint and the audit endpoint. unique identifier for the host site
/// Default is the app’s info.plist bundle identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// <em>OPTIONAL</em> Gives the ability to control certain groups of elements colors and button display types. Can use any CSS types of colors.
@property (nonatomic, strong) CustomUI * _Nullable customUI;
/// <em>OPTIONAL</em> the legal bases to ask for consent or declare for transparency for this site/publisher.
@property (nonatomic, strong) LegalBases * _Nullable legalBases;
/// <em>OPTIONAL</em> To replace any text in the CMP If this key exists, and the language is a ‘supported’ two-letter uppercase
/// langauge then this will take precedence over any other language scheme. Otherwise the CMP will fall back to the existing
/// scheme of chosing browser langauge code -> config.lang -> “EN”
@property (nonatomic, strong) Text * _Nullable text;
/// Initializer for the Conversant CMP Configuration.
/// \param version String. The version of the vendor list. It is important to bump this when you change any significant components of this configuration (privacy policy changes, etc).
///
/// \param countryCode String.  The country code of the country that determines legislation of reference. Commonly, this corresponds to the country in which the publisher’s business entity is established. see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
///
- (nonnull instancetype)initWithCountryCode:(NSString * _Nonnull)countryCode version:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <em>OPTIONAL</em> Gives the ability to control certain groups of elements colors and button display types. Can use any CSS types of colors.
SWIFT_CLASS("_TtC19ConversantCMPWidget8CustomUI")
@interface CustomUI : NSObject
/// <em>OPTIONAL</em> Background color of the CMP UI, see
/// https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
/// <em>OPTIONAL</em> Button border radius in CMP UI, see
/// https://www.w3schools.com/CSSref/css3_pr_border-radius.asp
@property (nonatomic, copy) NSString * _Nullable borderRadiusButton;
/// <em>OPTIONAL</em> Color of hyperlinks in CMP UI, see
/// https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
@property (nonatomic, copy) NSString * _Nullable linkColor;
/// <em>OPTIONAL</em> Primary accent color in CMP UI. Affects the button color, default is a blue color, see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
@property (nonatomic, copy) NSString * _Nullable primaryColor;
/// <em>OPTIONAL</em> Color of text in CMP UI, see
/// https://developer.mozilla.org/en-US/docs/Web/CSS/color_val
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget6Footer")
@interface Footer : NSObject
/// <em>OPTIONAL</em> Label for allow all button links
@property (nonatomic, copy) NSString * _Nullable allowAll;
/// <em>OPTIONAL</em> Rightmost call to action label on this page
@property (nonatomic, copy) NSString * _Nullable cta;
/// <em>OPTIONAL</em> Label for deny all button links
@property (nonatomic, copy) NSString * _Nullable denyAll;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget6Header")
@interface Header : NSObject
/// <em>OPTIONAL</em> Header for a companies purpose consents
@property (nonatomic, copy) NSString * _Nullable consent;
/// <em>OPTIONAL</em>  Header for a companies features
@property (nonatomic, copy) NSString * _Nullable feature;
/// <em>OPTIONAL</em>  Header for a companies purpose legitimate interest establishment
@property (nonatomic, copy) NSString * _Nullable legInt;
/// <em>OPTIONAL</em>  Header for a companies special purposes
@property (nonatomic, copy) NSString * _Nullable specialPurpose;
/// <em>OPTIONAL</em>  Header for a companies special features
@property (nonatomic, copy) NSString * _Nullable specialFeature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget5Label")
@interface Label : NSObject
/// <em>OPTIONAL</em> When the word feature appears in the UI
@property (nonatomic, copy) NSString * _Nullable feature;
/// <em>OPTIONAL</em> When the word purpose appears in the UI
@property (nonatomic, copy) NSString * _Nullable purpose;
/// <em>OPTIONAL</em> When the word special feature appears in the UI
@property (nonatomic, copy) NSString * _Nullable specialFeature;
/// <em>OPTIONAL</em> When the word special purpose appears in the UI
@property (nonatomic, copy) NSString * _Nullable specialPurpose;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget7Landing")
@interface Landing : NSObject
/// <em>OPTIONAL</em> Landing view body
@property (nonatomic, strong) Body * _Nullable body;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Purpose;

/// <em>OPTIONAL</em> The legal bases to ask for consent or declare for transparency for this site/publisher.
SWIFT_CLASS("_TtC19ConversantCMPWidget10LegalBases")
@interface LegalBases : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable feature;
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Purpose * _Nullable purpose;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable specialFeature;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable specialPurpose;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget16LegalDescription")
@interface LegalDescription : NSObject
/// <em>OPTIONAL</em> Label for hiding legal description of purposes and disclosures
@property (nonatomic, copy) NSString * _Nullable hide;
/// <em>OPTIONAL</em> Label for showing legal description for purposes and disclosures
@property (nonatomic, copy) NSString * _Nullable show;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget7Purpose")
@interface Purpose : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable consent;
/// <em>OPTIONAL</em>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable legitimateInterest;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget8Purposes")
@interface Purposes : NSObject
/// <em>OPTIONAL</em> All Headers for a companies purposes/features
@property (nonatomic, strong) Header * _Nullable header;
/// <em>OPTIONAL</em> All labels for purpose/feature or their specials
@property (nonatomic, strong) Label * _Nullable label;
/// <em>OPTIONAL</em> All text surrounding legal description
@property (nonatomic, strong) LegalDescription * _Nullable legalDescription;
/// <em>OPTIONAL</em> All text for companies show, hide, no for companies list
@property (nonatomic, strong) CompanyList * _Nullable companyList;
/// <em>OPTIONAL</em> Upper right tab link for “Purposes”
@property (nonatomic, copy) NSString * _Nullable tabTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Tabs;

/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget6Review")
@interface Review : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Tabs * _Nullable tabs;
/// <em>OPTIONAL</em> Describes all button text
@property (nonatomic, strong) Buttons * _Nullable buttons;
/// <em>OPTIONAL</em> Describes all the text in the footer of the Review View
@property (nonatomic, strong) Footer * _Nullable footer;
/// <em>OPTIONAL</em> Top intro body
@property (nonatomic, copy) NSString * _Nullable introBody;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget11SeeMoreLink")
@interface SeeMoreLink : NSObject
/// <em>OPTIONAL</em> Can expand to see more
@property (nonatomic, copy) NSString * _Nullable seeMore;
/// <em>OPTIONAL</em> Can expand to see more
@property (nonatomic, copy) NSString * _Nullable seeLess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget4Tabs")
@interface Tabs : NSObject
/// <em>OPTIONAL</em> Describes all the text in the companies accordion tab of the Review View
@property (nonatomic, strong) Companies * _Nullable companies;
/// <em>OPTIONAL</em> Describes all the text in the purposes accordion tab of the Review View
@property (nonatomic, strong) Purposes * _Nullable purposes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <em>OPTIONAL</em>
SWIFT_CLASS("_TtC19ConversantCMPWidget4Text")
@interface Text : NSObject
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Landing * _Nullable landing;
/// <em>OPTIONAL</em>
@property (nonatomic, strong) Review * _Nullable review;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
